{"project": "sgkit", "project_url": "https://pystatgen.github.io/sgkit/", "show_commit_url": "http://github.com/pystatgen/sgkit/commit/", "hash_length": 8, "revision_to_hash": {"402": "712f2cf1e5bba0812bf5990eafc61a3d570e940f", "540": "da81a168f1feafb3504a7616669d49645d002b71", "665": "119c0b93c4ec4fa6ad3c7d7a3b4c943761fca6f9", "667": "6790d9526178fa22494d1a0cb78d5d709ff5849b", "715": "5d58d09f22f023c866e6b252662f84f83302eb61", "831": "4169d9a37eb7974ee2ff38e08f60002ee6f95f52", "877": "93af9a26f372c9136694b85727b7f540129f193d", "880": "ce34ca1151e8613ae8f6a53f0718105aa1c486b3", "882": "ff976c5f6471dd7fe9ba264583e6ace3faffbc13", "886": "abba58d8a5bde14753cec0f7a6775730ed458b3d", "888": "6cd416ae47c6eab9004217a223904ae4e625e6f5", "892": "8073eeede1c61ff2c6566dcdd586cd1fc77baca2", "894": "1670d344a9d892680c059ff5ebcfb79add3ba506", "897": "4fb05a85200252c8856c8787c22309d5f3024fa7", "901": "486bbb0c1f85f158a1ccbcb7b3b11d4a0b73e4f9", "903": "6cf0ccbaa2b439f4808d81885ed2bac5eb9ef17a", "907": "4a9c2f3fe4eaba73b50822f79a90c268ded1eb2e", "909": "a7a25e4b8a7b7c17c3d0ba8c2654c71c7f1c8fd8", "911": "e0b3669f49c773e35cde11c1cb5b021db026f85d", "913": "926e7ce684b142b334982676d48516b0d252901f", "916": "7ce14d8f47b85772c66addb9e7d59b0e550b4fb3", "919": "b99c708040d8ef647599ac6cc9b43df0ccce5f94", "921": "000aa4fffeb9b22adc78ba7c9ddd30900a5e4de6", "924": "651f095984ddf785c5b3939f19cf312b3eb88ef3", "927": "375ad0fff8fe76ba75c2425508334e6b02508a98", "933": "357e6efb7e4c047b5e3421ca93aed6701fd0e52d", "937": "c13acb100e1d38c6602688b35f7aa82a1ffb4b3d", "939": "11d4427f2dc6af7d533398b781c4213d258b0684", "941": "d14b1e8a75cea1dd8cc25b52f6468a4429346703", "942": "3438d64e8b992b1f24ece8d4c59d9c2d70881136", "943": "6b3d495a0ee64255c3ace20903f6ad1225c7bf27", "946": "b4adc3ae1c8058cf9a47e9e0547c7cf26c3312b4", "949": "7f05c4049d362b589e77971dcbf974d26b423375", "951": "c582c4d23541bbc88c6dec7a9cfc5af205ef9277", "953": "4ecf75649102f092c8ea24323515e784d1277761", "959": "0dcea81ba8d5249a2d1835d746fffa1179cce306", "961": "41d286541c4a0fdddc1b60b164b9f8e7661d19ee", "963": "8870da3bfb3b26d2b3323cb16d4746a7e592aaff", "965": "e41dc7d6a5a84503fc765300affbbb3e6981c1da", "967": "b0a8bf9d56f1d99211253fff1312fc68da832b91", "971": "a198dce1ae6f3b32ca30b756cd74a471a3760762", "973": "0b7c0228c27da293e3d0fc9afd8c021f964aa133", "975": "64d3e134f6ce11e828209d77e0fb06d5091d310c", "977": "2edf8d09b47a9083892c4f4ae3f7ba99c31b2174", "982": "1aa0d7547d3a5193435bb91ae28b40cd1e3dc338", "985": "68b983c51c2c7e08914d64f83cd7b3fd05616f1a", "987": "ec9c6978ef7534a32dd62de19f685fdcedc91fee", "989": "6554e54d5808ba975d73d84c93976ba807076f3d", "991": "4b6671508ec07fea0855233f240c84352ffafda0", "995": "37e17d98a19e1cc814504db384dcb24a3a4e356f", "997": "c53add8bea3d9e90aa55687e6957af3e13b5507a", "999": "c7be7534f4db7fbef4e499f5acd4df10562928f8", "1001": "ee9ccfbcfad0009486752016e6a0d5589c7ceeb7", "1004": "cf69d7b22dd7e7aa17bc028d6e4a736e8480038e", "1007": "b0f70cdad3bf4d5e01e0102b6940beea43b4c42a", "1013": "0454e91e035244487cb848eb0f9984dd17685724", "1015": "843eb2aff709d139a6a9e767f18182c38da78f78", "1017": "82aa8171445244994434067fc51564f78debc44c", "1020": "6fc8d539799e203feff11b791f8744ddec269f5e", "1022": "ccfb5779c760b0904b354a8853c332f8a8186222", "1028": "9c624af33cff6ade1a2a399f53b2558c45699ba3", "1031": "e6670e728157de0f4b78495f6f644d9fbf8ae32c", "1033": "1adf0061992e22bb107a55f8ae030828c250eaae", "1035": "65ba9637d2755dcf33f76680779ec8434828d8ff", "1041": "3e4e328fcf1b42465af3d101221ee2f9bc28ec2d", "1045": "99c1868a13d3aedd22f97001b6d8c09a790f03f5", "1051": "4ce7e5524ccd1cdd5c0e70739897d72541d3006c", "1053": "7e73e8fb5f3a686a2f07ff6afea0dc876e455fbe", "1056": "48c3c4367586f81627de2b101c9cf2ad769b414c", "1058": "3ce8eac997bbeac841005c10fb514bcfb5a2e0ff", "1060": "0a51f902d4ba8ccb794e24ef756af23ab4c28ac7", "1062": "c2afafc4196ca46d7059adc056579047bb7c5823", "1065": "c205e5cce255875223dd0fa11aa892039e033179", "1067": "42805da5710581779fd12dba09e9d3704cb99931", "1069": "9c79fb634f47575b9bb6613dbedc7ad1ce41340b", "1071": "ae05a6876cdcb69c13d72865e479d51107613e9d", "1074": "6264fc66b16ccdd063efacacd8aa5ce41087186e", "1076": "a9ad63173614849cd8214ab105cf8cf24e75052f", "1078": "cc1d9294be0b2c356bc38fed3fac51b1ca146bec", "1080": "22bb25541dc8ee34f8c6526e632b0e08aca24ec4", "1083": "5461508c76758c064f36db2e970c696ca3bdcf15", "1086": "8140fd240da98b8b026775a77b341b5f2df020d6", "1088": "505f1eb3083f4681058537376b2cf2bb60d5a363", "1091": "fb22e016d070ca99208dc5a52703bda44f13c784", "1096": "2e047c04a05b80ccc3e3a3dc4cf05537bbd72830", "1098": "2baf61045cb3711dbcf34ed2d3ba04f28be1a7a1", "1101": "ef6a442a7e21bd3821ee339dbea1f6fab97b5263", "1103": "cc7280435fa8de80a19f729948eb07d89fb1eae2", "1105": "e42823fa1ee286dfa6ac317945a3e7103c45ae9f"}, "revision_to_date": {"402": 1605018150000, "540": 1615897198000, "665": 1623765299000, "667": 1623767716000, "715": 1627563247000, "831": 1636970253000, "877": 1644161232000, "880": 1646387267000, "882": 1648744369000, "886": 1648805223000, "888": 1649324169000, "892": 1649723914000, "894": 1649952738000, "897": 1650490315000, "901": 1651154728000, "903": 1651154493000, "907": 1651217069000, "909": 1643121009000, "911": 1651755819000, "913": 1651827729000, "916": 1652689513000, "919": 1653036185000, "921": 1654780844000, "924": 1655730406000, "927": 1655352771000, "933": 1655851004000, "937": 1655847365000, "939": 1657234064000, "941": 1659376092000, "942": 1659441582000, "943": 1657185591000, "946": 1659446017000, "949": 1659451496000, "951": 1659613662000, "953": 1660045300000, "959": 1660358932000, "961": 1660561890000, "963": 1661855113000, "965": 1660809428000, "967": 1660015661000, "971": 1662626953000, "973": 1662537184000, "975": 1663144650000, "977": 1664377287000, "982": 1663729465000, "985": 1663126869000, "987": 1664441700000, "989": 1664523626000, "991": 1665061214000, "995": 1664504111000, "997": 1664866899000, "999": 1664443777000, "1001": 1666002760000, "1004": 1665792168000, "1007": 1666006254000, "1013": 1666101414000, "1015": 1666605910000, "1017": 1666690520000, "1020": 1667404064000, "1022": 1662650624000, "1028": 1668602203000, "1031": 1669113428000, "1033": 1667314020000, "1035": 1669652166000, "1041": 1669731412000, "1045": 1669599943000, "1051": 1670238151000, "1053": 1669743605000, "1056": 1669136006000, "1058": 1670846873000, "1060": 1671036860000, "1062": 1672662088000, "1065": 1672757090000, "1067": 1672846029000, "1069": 1672847116000, "1071": 1673017475000, "1074": 1673278121000, "1076": 1673347854000, "1078": 1673856325000, "1080": 1673877409000, "1083": 1674004350000, "1086": 1673166481000, "1088": 1674571935000, "1091": 1669810047000, "1096": 1674807975000, "1098": 1675169019000, "1101": 1675256703000, "1103": 1673955453000, "1105": 1675785356000}, "params": {"machine": ["github-actions"], "python": ["3.8"], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "github-actions", "python": "3.8", "branch": "HEAD"}], "benchmarks": {"benchmarks_plink.PlinkSpeedSuite.track_write_plink_speed": {"code": "class PlinkSpeedSuite:\n    def track_write_plink_speed(self) -> None:\n        # throw away first run due to numba jit compilation\n        for _ in range(2):\n            duration = _time_func(write_plink, self.ds, path=self.output_plink)\n        return _to_mb_per_s(get_dir_size(self.dir), duration)\n\n    def setup(self) -> None:\n        self.ds = simulate_genotype_call_dataset(\n            n_variant=1000000, n_sample=1000, seed=0\n        )\n    \n        self.dir = Path(tempfile.mkdtemp())\n        self.output_plink = self.dir / \"plink_out\"", "name": "benchmarks_plink.PlinkSpeedSuite.track_write_plink_speed", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "unit", "version": "bd0a5d65a483fcc3805fe0397ded0bd7a60b220a9121a1e2fa2fccd2b4dcf304"}, "benchmarks_stats.TimeSuite.time_count_call_alleles": {"code": "class TimeSuite:\n    def time_count_call_alleles(self) -> None:\n        count_call_alleles(self.count_call_alleles_ds)\n\n    def setup(self) -> None:\n        self.count_call_alleles_ds = simulate_genotype_call_dataset(\n            n_variant=100_000, n_sample=1000\n        )\n        self.count_cohort_alleles_ds = simulate_genotype_call_dataset(\n            n_variant=100_000, n_sample=1000\n        )\n        sample_cohort = np.repeat(\n            [0, 1], self.count_cohort_alleles_ds.dims[\"samples\"] // 2\n        )\n        self.count_cohort_alleles_ds[\"sample_cohort\"] = xr.DataArray(\n            sample_cohort, dims=\"samples\"\n        )", "min_run_count": 2, "name": "benchmarks_stats.TimeSuite.time_count_call_alleles", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "99097810ae6b766dfae46c4f296762848ccf073c2fd2f01204786c3957ae8c42", "warmup_time": -1}, "benchmarks_stats.TimeSuite.time_count_cohort_alleles": {"code": "class TimeSuite:\n    def time_count_cohort_alleles(self) -> None:\n        count_cohort_alleles(self.count_cohort_alleles_ds)\n\n    def setup(self) -> None:\n        self.count_call_alleles_ds = simulate_genotype_call_dataset(\n            n_variant=100_000, n_sample=1000\n        )\n        self.count_cohort_alleles_ds = simulate_genotype_call_dataset(\n            n_variant=100_000, n_sample=1000\n        )\n        sample_cohort = np.repeat(\n            [0, 1], self.count_cohort_alleles_ds.dims[\"samples\"] // 2\n        )\n        self.count_cohort_alleles_ds[\"sample_cohort\"] = xr.DataArray(\n            sample_cohort, dims=\"samples\"\n        )", "min_run_count": 2, "name": "benchmarks_stats.TimeSuite.time_count_cohort_alleles", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fb11db6a5b627835f0a682aa2ce1c793f9156522529ddfde2938933cc2278ff3", "warmup_time": -1}, "benchmarks_vcf.VcfCompressionSuite.track_zarr_compression_size": {"code": "class VcfCompressionSuite:\n    def track_zarr_compression_size(self) -> None:\n    \n        encoding = {\n            \"variant_AF\": {\n                \"filters\": [\n                    FixedScaleOffset(offset=0, scale=10000, dtype=\"f4\", astype=\"u2\")\n                ],\n            },\n            \"call_DS\": {\n                \"filters\": [\n                    FixedScaleOffset(offset=0, scale=100, dtype=\"f4\", astype=\"u1\")\n                ],\n            },\n            \"variant_DR2\": {\n                \"filters\": [\n                    FixedScaleOffset(offset=0, scale=100, dtype=\"f4\", astype=\"u1\")\n                ],\n            },\n        }\n    \n        kwargs = zarr_array_sizes(self.input_vcf)\n    \n        vcf_to_zarr(\n            self.input_vcf,\n            self.output_zarr,\n            fields=[\"INFO/*\", \"FORMAT/*\"],\n            chunk_length=500_000,\n            encoding=encoding,\n            **kwargs,\n        )\n    \n        original_size = du(self.input_vcf)\n        zarr_size = du(self.output_zarr)\n    \n        return float(zarr_size) / original_size\n\n    def setup(self) -> None:\n    \n        asv_env_dir = os.environ[\"ASV_ENV_DIR\"]\n        self.input_vcf = Path(\n            asv_env_dir,\n            \"project/sgkit/tests/io/vcf/data/1kg_target_chr20_38_imputed_chr20_500000.vcf.bgz\",\n        )\n    \n        tmp_path = Path(tempfile.mkdtemp())\n        self.output_zarr = tmp_path.joinpath(\"1000G.out.zarr\")", "name": "benchmarks_vcf.VcfCompressionSuite.track_zarr_compression_size", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "unit", "version": "3bde1c6998a17a42b817167c3a7400cb662f5e0aab8ea3759e348e3dbe6f21a8"}, "benchmarks_vcf.VcfSpeedSuite.track_vcf_to_zarr_speed": {"code": "class VcfSpeedSuite:\n    def track_vcf_to_zarr_speed(self) -> None:\n        duration = _time_func(\n            vcf_to_zarr,\n            self.input_vcf,\n            self.output_zarr,\n            fields=[\"INFO/*\", \"FORMAT/*\"],\n            field_defs=self.field_defs,\n            chunk_length=1_000,\n            target_part_size=None,\n        )\n        return _to_mb_per_s(os.path.getsize(self.input_vcf), duration)\n\n    def setup(self) -> None:\n    \n        asv_env_dir = os.environ[\"ASV_ENV_DIR\"]\n        path = Path(\n            asv_env_dir,\n            \"project/sgkit/tests/io/vcf/data/1000G.phase3.broad.withGenotypes.chr20.10100000.vcf.gz\",\n        )\n        tmp_path = Path(tempfile.mkdtemp())\n        self.input_vcf = tmp_path.joinpath(\"1000G.in.vcf\").as_posix()\n        self.input_zarr = tmp_path.joinpath(\"1000G.in.zarr\").as_posix()\n        self.output_zarr = tmp_path.joinpath(\"1000G.out.zarr\").as_posix()\n        self.output_vcf = tmp_path.joinpath(\"1000G.out.vcf\").as_posix()\n    \n        # decompress file into temp dir so we can measure speed of vcf_to_zarr for uncompressed text\n        _gunzip(path, self.input_vcf)\n    \n        # create a zarr input file so we can measure zarr_to_vcf speed\n        self.field_defs = {\n            \"FORMAT/AD\": {\"Number\": \"R\"},\n        }\n        vcf_to_zarr(\n            self.input_vcf,\n            self.input_zarr,\n            fields=[\"INFO/*\", \"FORMAT/*\"],\n            field_defs=self.field_defs,\n            chunk_length=1_000,\n            target_part_size=None,\n        )", "name": "benchmarks_vcf.VcfSpeedSuite.track_vcf_to_zarr_speed", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "unit", "version": "4becdf350df482aff6fb5c74ee2d02e613e42617c41095ae04c153ddc5b1ef99"}, "benchmarks_vcf.VcfSpeedSuite.track_zarr_to_vcf_speed": {"code": "class VcfSpeedSuite:\n    def track_zarr_to_vcf_speed(self) -> None:\n        # throw away first run due to numba jit compilation\n        for _ in range(2):\n            duration = _time_func(zarr_to_vcf, self.input_zarr, self.output_vcf)\n        return _to_mb_per_s(os.path.getsize(self.output_vcf), duration)\n\n    def setup(self) -> None:\n    \n        asv_env_dir = os.environ[\"ASV_ENV_DIR\"]\n        path = Path(\n            asv_env_dir,\n            \"project/sgkit/tests/io/vcf/data/1000G.phase3.broad.withGenotypes.chr20.10100000.vcf.gz\",\n        )\n        tmp_path = Path(tempfile.mkdtemp())\n        self.input_vcf = tmp_path.joinpath(\"1000G.in.vcf\").as_posix()\n        self.input_zarr = tmp_path.joinpath(\"1000G.in.zarr\").as_posix()\n        self.output_zarr = tmp_path.joinpath(\"1000G.out.zarr\").as_posix()\n        self.output_vcf = tmp_path.joinpath(\"1000G.out.vcf\").as_posix()\n    \n        # decompress file into temp dir so we can measure speed of vcf_to_zarr for uncompressed text\n        _gunzip(path, self.input_vcf)\n    \n        # create a zarr input file so we can measure zarr_to_vcf speed\n        self.field_defs = {\n            \"FORMAT/AD\": {\"Number\": \"R\"},\n        }\n        vcf_to_zarr(\n            self.input_vcf,\n            self.input_zarr,\n            fields=[\"INFO/*\", \"FORMAT/*\"],\n            field_defs=self.field_defs,\n            chunk_length=1_000,\n            target_part_size=None,\n        )", "name": "benchmarks_vcf.VcfSpeedSuite.track_zarr_to_vcf_speed", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "unit", "version": "1ed3294e5cc6d16a8ebeeea2562ba8d72bff2e09a9dab23bd96d4dc82b8f89a3"}}, "machines": {"github-actions": {"machine": "github-actions", "version": 1}}, "tags": {"0.1.0a1": 402, "0.2.0a1": 540, "0.3.0": 715, "0.3.0a1": 665, "0.3.0a2": 667, "0.4.0": 831, "0.5.0": 888, "0.6.0": 1098}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}