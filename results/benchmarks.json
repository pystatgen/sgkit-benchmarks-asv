{
    "benchmarks_plink.PlinkSpeedSuite.track_write_plink_speed": {
        "code": "class PlinkSpeedSuite:\n    def track_write_plink_speed(self) -> None:\n        # throw away first run due to numba jit compilation\n        for _ in range(2):\n            duration = _time_func(write_plink, self.ds, path=self.output_plink)\n        return _to_mb_per_s(get_dir_size(self.dir), duration)\n\n    def setup(self) -> None:\n        self.ds = simulate_genotype_call_dataset(\n            n_variant=1000000, n_sample=1000, seed=0\n        )\n    \n        self.dir = Path(tempfile.mkdtemp())\n        self.output_plink = self.dir / \"plink_out\"",
        "name": "benchmarks_plink.PlinkSpeedSuite.track_write_plink_speed",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "bd0a5d65a483fcc3805fe0397ded0bd7a60b220a9121a1e2fa2fccd2b4dcf304"
    },
    "benchmarks_stats.TimeSuite.time_count_call_alleles": {
        "code": "class TimeSuite:\n    def time_count_call_alleles(self) -> None:\n        count_call_alleles(self.count_call_alleles_ds)\n\n    def setup(self) -> None:\n        self.count_call_alleles_ds = simulate_genotype_call_dataset(\n            n_variant=100_000, n_sample=1000\n        )\n        self.count_cohort_alleles_ds = simulate_genotype_call_dataset(\n            n_variant=100_000, n_sample=1000\n        )\n        sample_cohort = np.repeat(\n            [0, 1], self.count_cohort_alleles_ds.dims[\"samples\"] // 2\n        )\n        self.count_cohort_alleles_ds[\"sample_cohort\"] = xr.DataArray(\n            sample_cohort, dims=\"samples\"\n        )",
        "min_run_count": 2,
        "name": "benchmarks_stats.TimeSuite.time_count_call_alleles",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "99097810ae6b766dfae46c4f296762848ccf073c2fd2f01204786c3957ae8c42",
        "warmup_time": -1
    },
    "benchmarks_stats.TimeSuite.time_count_cohort_alleles": {
        "code": "class TimeSuite:\n    def time_count_cohort_alleles(self) -> None:\n        count_cohort_alleles(self.count_cohort_alleles_ds)\n\n    def setup(self) -> None:\n        self.count_call_alleles_ds = simulate_genotype_call_dataset(\n            n_variant=100_000, n_sample=1000\n        )\n        self.count_cohort_alleles_ds = simulate_genotype_call_dataset(\n            n_variant=100_000, n_sample=1000\n        )\n        sample_cohort = np.repeat(\n            [0, 1], self.count_cohort_alleles_ds.dims[\"samples\"] // 2\n        )\n        self.count_cohort_alleles_ds[\"sample_cohort\"] = xr.DataArray(\n            sample_cohort, dims=\"samples\"\n        )",
        "min_run_count": 2,
        "name": "benchmarks_stats.TimeSuite.time_count_cohort_alleles",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fb11db6a5b627835f0a682aa2ce1c793f9156522529ddfde2938933cc2278ff3",
        "warmup_time": -1
    },
    "benchmarks_vcf.VcfCompressionSuite.track_zarr_compression_size": {
        "code": "class VcfCompressionSuite:\n    def track_zarr_compression_size(self) -> None:\n    \n        encoding = {\n            \"variant_AF\": {\n                \"filters\": [\n                    FixedScaleOffset(offset=0, scale=10000, dtype=\"f4\", astype=\"u2\")\n                ],\n            },\n            \"call_DS\": {\n                \"filters\": [\n                    FixedScaleOffset(offset=0, scale=100, dtype=\"f4\", astype=\"u1\")\n                ],\n            },\n            \"variant_DR2\": {\n                \"filters\": [\n                    FixedScaleOffset(offset=0, scale=100, dtype=\"f4\", astype=\"u1\")\n                ],\n            },\n        }\n    \n        kwargs = zarr_array_sizes(self.input_vcf)\n    \n        vcf_to_zarr(\n            self.input_vcf,\n            self.output_zarr,\n            fields=[\"INFO/*\", \"FORMAT/*\"],\n            chunk_length=500_000,\n            encoding=encoding,\n            **kwargs,\n        )\n    \n        original_size = du(self.input_vcf)\n        zarr_size = du(self.output_zarr)\n    \n        return float(zarr_size) / original_size\n\n    def setup(self) -> None:\n    \n        asv_env_dir = os.environ[\"ASV_ENV_DIR\"]\n        self.input_vcf = Path(\n            asv_env_dir,\n            \"project/sgkit/tests/io/vcf/data/1kg_target_chr20_38_imputed_chr20_500000.vcf.bgz\",\n        )\n    \n        tmp_path = Path(tempfile.mkdtemp())\n        self.output_zarr = tmp_path.joinpath(\"1000G.out.zarr\")",
        "name": "benchmarks_vcf.VcfCompressionSuite.track_zarr_compression_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "3bde1c6998a17a42b817167c3a7400cb662f5e0aab8ea3759e348e3dbe6f21a8"
    },
    "benchmarks_vcf.VcfSpeedSuite.track_vcf_to_zarr_speed": {
        "code": "class VcfSpeedSuite:\n    def track_vcf_to_zarr_speed(self) -> None:\n        duration = _time_func(\n            vcf_to_zarr,\n            self.input_vcf,\n            self.output_zarr,\n            fields=[\"INFO/*\", \"FORMAT/*\"],\n            field_defs=self.field_defs,\n            chunk_length=1_000,\n            target_part_size=None,\n        )\n        return _to_mb_per_s(os.path.getsize(self.input_vcf), duration)\n\n    def setup(self) -> None:\n    \n        asv_env_dir = os.environ[\"ASV_ENV_DIR\"]\n        path = Path(\n            asv_env_dir,\n            \"project/sgkit/tests/io/vcf/data/1000G.phase3.broad.withGenotypes.chr20.10100000.vcf.gz\",\n        )\n        tmp_path = Path(tempfile.mkdtemp())\n        self.input_vcf = tmp_path.joinpath(\"1000G.in.vcf\").as_posix()\n        self.input_zarr = tmp_path.joinpath(\"1000G.in.zarr\").as_posix()\n        self.output_zarr = tmp_path.joinpath(\"1000G.out.zarr\").as_posix()\n        self.output_vcf = tmp_path.joinpath(\"1000G.out.vcf\").as_posix()\n    \n        # decompress file into temp dir so we can measure speed of vcf_to_zarr for uncompressed text\n        _gunzip(path, self.input_vcf)\n    \n        # create a zarr input file so we can measure zarr_to_vcf speed\n        self.field_defs = {\n            \"FORMAT/AD\": {\"Number\": \"R\"},\n        }\n        vcf_to_zarr(\n            self.input_vcf,\n            self.input_zarr,\n            fields=[\"INFO/*\", \"FORMAT/*\"],\n            field_defs=self.field_defs,\n            chunk_length=1_000,\n            target_part_size=None,\n        )",
        "name": "benchmarks_vcf.VcfSpeedSuite.track_vcf_to_zarr_speed",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "4becdf350df482aff6fb5c74ee2d02e613e42617c41095ae04c153ddc5b1ef99"
    },
    "benchmarks_vcf.VcfSpeedSuite.track_zarr_to_vcf_speed": {
        "code": "class VcfSpeedSuite:\n    def track_zarr_to_vcf_speed(self) -> None:\n        # throw away first run due to numba jit compilation\n        for _ in range(2):\n            duration = _time_func(zarr_to_vcf, self.input_zarr, self.output_vcf)\n        return _to_mb_per_s(os.path.getsize(self.output_vcf), duration)\n\n    def setup(self) -> None:\n    \n        asv_env_dir = os.environ[\"ASV_ENV_DIR\"]\n        path = Path(\n            asv_env_dir,\n            \"project/sgkit/tests/io/vcf/data/1000G.phase3.broad.withGenotypes.chr20.10100000.vcf.gz\",\n        )\n        tmp_path = Path(tempfile.mkdtemp())\n        self.input_vcf = tmp_path.joinpath(\"1000G.in.vcf\").as_posix()\n        self.input_zarr = tmp_path.joinpath(\"1000G.in.zarr\").as_posix()\n        self.output_zarr = tmp_path.joinpath(\"1000G.out.zarr\").as_posix()\n        self.output_vcf = tmp_path.joinpath(\"1000G.out.vcf\").as_posix()\n    \n        # decompress file into temp dir so we can measure speed of vcf_to_zarr for uncompressed text\n        _gunzip(path, self.input_vcf)\n    \n        # create a zarr input file so we can measure zarr_to_vcf speed\n        self.field_defs = {\n            \"FORMAT/AD\": {\"Number\": \"R\"},\n        }\n        vcf_to_zarr(\n            self.input_vcf,\n            self.input_zarr,\n            fields=[\"INFO/*\", \"FORMAT/*\"],\n            field_defs=self.field_defs,\n            chunk_length=1_000,\n            target_part_size=None,\n        )",
        "name": "benchmarks_vcf.VcfSpeedSuite.track_zarr_to_vcf_speed",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "1ed3294e5cc6d16a8ebeeea2562ba8d72bff2e09a9dab23bd96d4dc82b8f89a3"
    },
    "version": 2
}